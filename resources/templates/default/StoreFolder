% try:
<% user_auth = instance.__domain__.get_user_auth()
isstaff = 'anonymous@%s' % instance.__domain__['name'] != user_auth['name']
## 'group.staff@%s' % instance.__domain__['name'] in user_auth['groups']
import karacos
import sys, traceback
attributes['request'] = karacos.serving.get_request()
attributes['count']=9
attributes['page']=1
if 'count' in attributes['request'].str_params:
	attributes['count'] = int(attributes['request'].str_params['count'])
if 'page' in attributes['request'].str_params:
	attributes['page'] = int(attributes['request'].str_params['page'])
attributes['method'] = 'get_items_list'
attributes['items'] = instance._get_items_list(instance._get_items_by_auth_,attributes['count'],attributes['page'])
%>

% if 'karacos-fragment' not in attributes['request'].headers and 'Karacos-Fragment' not in attributes['request'].headers:
<%
import jsontemplate
template = None
fragment = "get_items_list.jst"
try:
    template = instance.__domain__.lookup.get_template('%s/fragments/%s' % (instance.get_site_theme_base(), fragment))
except:
    template = instance.__domain__.lookup.get_template('/default/fragments/%s' % fragment)
jstsrc = template.render(instance=instance.__domain__, kw={})
def more_formatters(formatter_name):
    instance.log.warn("fetching formatter %s" % formatter_name)
    if formatter_name == 'fprice' or formatter_name == u'fprice':
        def format_price(price):
            instance.log.warn("formatting price %s" % price)
            if price == None:
                price = "0"
        	result = "%2f" % float(price)
        	if result == None:
        	    return "0.00"
        	return result
        return format_price
    else:
        def default(value):
            return value
        return default
jst = jsontemplate.Template(jstsrc)
try:
    attributes['storeitemsstring'] = jst.expand(attributes['items'])
except:
    attributes['storeitemsstring'] = """Error processing :<pre>----
%s
----
%s
----
%s
----
%s
</pre>""" % (items,sys.exc_info(),traceback.format_exc(),jstsrc)
%>
	
% endif

<%include file="/default/StoreParent"/>


% except:
	some errors :
	<pre>
		${sys.exc_info()}
		---
		%for line in traceback.format_exc().splitlines():
			${line}
		%endfor
	</pre>
% endtry